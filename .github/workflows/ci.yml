name: CI Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0.19
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: mesi_rpg_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Fix permissions pour mvnw
      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Create config files
        run: |
          mkdir -p src/main/resources
          cat > src/main/resources/application.properties << EOF
          spring.application.name=mesi_backend_rpg
          server.port=8080
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
          spring.datasource.url=jdbc:mysql://localhost:3306/mesi_rpg_test?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
          spring.datasource.username=root
          spring.datasource.password=root
          spring.jackson.time-zone=Europe/Paris
          spring.jpa.show-sql=false
          firebase.web.api.key=\${{ secrets.FIREBASE_WEB_API_KEY }}
          email=test@example.com
          mdp=test_password
          anthropic.model=claude-3-7-sonnet-20250219
          anthropic.api.key=\${{ secrets.ANTHROPIC_API_KEY }}
          spring.websocket.enabled=true
          spring.servlet.multipart.max-file-size=10MB
          spring.servlet.multipart.max-request-size=10MB
          spring.servlet.multipart.enabled=true
          spring.servlet.multipart.file-size-threshold=2MB
          EOF
          
          # Fix de la condition pour Firebase
          if [[ -n "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]]; then
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > src/main/resources/firebase-service-account.json
          else
            cat > src/main/resources/firebase-service-account.json << 'FIREBASE_EOF'
          {
            "type": "service_account",
            "project_id": "test-project",
            "private_key_id": "test",
            "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB\ntest_key_data_here\n-----END PRIVATE KEY-----",
            "client_email": "test@test.iam.gserviceaccount.com",
            "client_id": "123456789",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs"
          }
          FIREBASE_EOF
          fi

      - name: Run tests
        run: ./mvnw clean test -B

      - name: Build application
        run: ./mvnw clean package -DskipTests -B

      - name: Build Docker image
        run: docker build -t mesi-backend:latest .

      - name: Test Docker container
        run: |
          # Démarrer le container en arrière-plan
          docker run -d --name test-app \
            -e MYSQL_DATABASE=mesi_rpg \
            -e MYSQL_USER=root \
            -e MYSQL_PASSWORD=root \
            -e SPRING_PROFILES_ACTIVE=dev \
            -p 8080:8080 \
            mesi-backend:latest
          
          # Attendre que l'application démarre
          echo "Attente du démarrage..."
          sleep 60
          
          # Test de santé
          if curl -f http://localhost:8080/api/public/login; then
            echo "✅ Application OK"
          else
            echo "❌ Application KO"
            docker logs test-app
            exit 1
          fi
          
          # Nettoyer
          docker stop test-app
          docker rm test-app